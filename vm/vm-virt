#!/usr/bin/env bash

# -------------------------------------------------------------------
# Debogue
#set -o errexit
#set -o pipefail
#set -o nounset
#set -o xtrace

# Image de base qcow2
#BASE_AMD64_QCOW2_FILENAME=debian-10.2.0-openstack-amd64.qcow2
BASE_AMD64_QCOW2_FILENAME=debian-9.8.2-20190303-openstack-amd64.qcow2
BASE_AARCH64_QCOW2_FILENAME=debian-10.2.0-openstack-arm64.qcow2

DATE_SEC=$(date +%s)                            # date en seconde depuis 1970
DOM_NAME=pel-${DATE_SEC}                        # nom du domaine / VM

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
USER_DATA=${CURRENT_DIR}/cloud-init/user-data   # fichier de configuration utilisateur
META_DATA=${CURRENT_DIR}/cloud-init/meta-data   # fichier de configuration reseau

TAILLE_VDISK=3G                                 # taille du disque virtuel

TMP=~/tmp                                       # repertoire d'accueil des fichiers generes

OUTPUT_ISO=${TMP}/cloud-init-${DATE_SEC}.iso    # image iso contenant la configuration cloud-init
OUTPUT_QCOW2_DIR=${TMP}                         # repertoire d'accueil des fichiers generes
OUTPUT_QCOW2_FILENAME=${DOM_NAME}.qcow2         # image layer qcow2
BASE_QCOW2=${TMP}/${BASE_AMD64_QCOW2_FILENAME}  # image de base qcow2
# -------------------------------------------------------------------

# Generation d'une image iso contenant les configurations pour cloud-init
# - meta-data
# - user-data
_gen_cloud_init_iso()
{
    # Creation de l'iso
    genisoimage -output ${OUTPUT_ISO} -volid cidata -joliet -rock ${USER_DATA} ${META_DATA}
}

# Creation d'un layer qcow2 Ã  partir d'une image de base qcow2
_gen_new_qcow2()
{
    pushd ${OUTPUT_QCOW2_DIR}
    # Creation d'un layer
    qemu-img create -b ${BASE_QCOW2} -f qcow2 ${OUTPUT_QCOW2_FILENAME} ${TAILLE_VDISK}
    popd
}

# Creation du domaine / VM
_create_dom()
{
    virt-install \
        --noreboot \
        --import \
        --name ${DOM_NAME} \
        --ram 2048 \
        --vcpus 1 \
        --disk ${OUTPUT_QCOW2_DIR}/${OUTPUT_QCOW2_FILENAME},format=qcow2,bus=virtio \
        --disk ${OUTPUT_ISO},device=cdrom \
        --network bridge=virbr0,model=virtio \
        --os-type=generic \
        --os-variant=generic \
        --noautoconsole
		#--arch aarch64
}

_usage()
{

    echo "Usage: $0 {create|delete|start|stop|destroy|list}" >&2
}

_help()
{
	local NOM_SCRIPT=$0
	echo "${NOM_SCRIPT} create  <domain>"
	echo "${NOM_SCRIPT} delete  <domain>"
	echo "${NOM_SCRIPT} start   <domain>"
	echo "${NOM_SCRIPT} destroy <domain>"
	echo "${NOM_SCRIPT} list"
}

# -------------------------------------------------------------------
case "$1" in
  create)
    _gen_cloud_init_iso
    _gen_new_qcow2
	  _create_dom
	  ;;
  delete)
    if [[ $# -ne 2 ]]; then
        _usage
        exit 1
    fi
    DOMAIN=$2
    virsh undefine --nvram --domain ${DOMAIN} --remove-all-storage
    ;;
  start)
    if [[ $# -ne 2 ]]; then
        _usage
        exit 1
    fi
    DOMAIN=$2
    virsh start ${DOMAIN}
    ;;
  stop)
    if [[ $# -ne 2 ]]; then
        _usage
        exit 1
    fi
    DOMAIN=$2
    virsh shutdown ${DOMAIN}
    ;;
  destroy)
    if [[ $# -ne 2 ]]; then
        _usage
        exit 1
    fi
    DOMAIN=$2
    virsh destroy --domain ${DOMAIN}
    ;;
  list)
    virsh list --all
    ;;
  -help|--help)
	  _help
	  exit 1
	  ;;
  *)
	  _usage
	  exit 1
	  ;;
esac

# Debogue
#trap 'echo Error at about $LINEO' ERR

exit 0
